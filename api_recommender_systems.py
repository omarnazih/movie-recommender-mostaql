# -*- coding: utf-8 -*-
"""api-recommender-systems.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DVop5mUjzHWGSjHVd0y4c-sqni1M0xu1

# Movies Recommender System

![](http://labs.criteo.com/wp-content/uploads/2017/08/CustomersWhoBought3.jpg)
"""

import pandas as pd
import numpy as np
import ast, json
from scipy import stats
from ast import literal_eval
from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer
from sklearn.metrics.pairwise import linear_kernel, cosine_similarity
from nltk.stem.snowball import SnowballStemmer
from nltk.stem.wordnet import WordNetLemmatizer
from nltk.corpus import wordnet
from surprise import Reader, Dataset, SVD
from surprise.model_selection import cross_validate, KFold

import warnings; warnings.simplefilter('ignore')

"""## Simple Recommender

"""

md = pd. read_csv('./input/movies_metadata.csv')
#md

md['genres'] = md['genres'].fillna('[]').apply(literal_eval).apply(lambda x: [i['name'] for i in x] if isinstance(x, list) else [])

vote_counts = md[md['vote_count'].notnull()]['vote_count'].astype('int')
vote_averages = md[md['vote_average'].notnull()]['vote_average'].astype('int')
C = vote_averages.mean()

m = vote_counts.quantile(0.95)

md['year'] = pd.to_datetime(md['release_date'], errors='coerce').apply(lambda x: str(x).split('-')[0] if x != np.nan else np.nan)

qualified = md[(md['vote_count'] >= m) & (md['vote_count'].notnull()) & (md['vote_average'].notnull())][['title', 'year', 'vote_count', 'vote_average', 'popularity', 'genres']]
qualified['vote_count'] = qualified['vote_count'].astype('int')
qualified['vote_average'] = qualified['vote_average'].astype('int')
qualified.shape

def weighted_rating(x):
    v = x['vote_count']
    R = x['vote_average']
    return (v/(v+m) * R) + (m/(m+v) * C)

qualified['wr'] = qualified.apply(weighted_rating, axis=1)

qualified = qualified.sort_values('wr', ascending=False).head(250)

"""### Top Movies"""

s = md.apply(lambda x: pd.Series(x['genres']),axis=1).stack().reset_index(level=1, drop=True)
s.name = 'genre'
gen_md = md.drop('genres', axis=1).join(s)

def build_chart(genre, percentile=0.85):
    df = gen_md[gen_md['genre'] == genre]
    vote_counts = df[df['vote_count'].notnull()]['vote_count'].astype('int')
    vote_averages = df[df['vote_average'].notnull()]['vote_average'].astype('int')
    C = vote_averages.mean()
    m = vote_counts.quantile(percentile)
    
    qualified = df[(df['vote_count'] >= m) & (df['vote_count'].notnull()) & (df['vote_average'].notnull())][['title', 'year', 'vote_count', 'vote_average', 'popularity']]
    qualified['vote_count'] = qualified['vote_count'].astype('int')
    qualified['vote_average'] = qualified['vote_average'].astype('int')
    
    qualified['wr'] = qualified.apply(lambda x: (x['vote_count']/(x['vote_count']+m) * x['vote_average']) + (m/(m+x['vote_count']) * C), axis=1)
    qualified = qualified.sort_values('wr', ascending=False).head(250)
    
    return qualified

"""## Content Based Recommender

"""

links_small = pd.read_csv('./input/links_small.csv')
links_small = links_small[links_small['tmdbId'].notnull()]['tmdbId'].astype('int')

#md = md.drop([19730, 29503, 35587])

#Check EDA Notebook for how and why I got these indices.
md['id'] = md['id'].astype('int')

smd = md[md['id'].isin(links_small)]
smd.shape

"""### Movie Description Based Recommender

"""

smd['tagline'] = smd['tagline'].fillna('')
smd['description'] = smd['overview'] + smd['tagline']
smd['description'] = smd['description'].fillna('')

tf = TfidfVectorizer(analyzer='word',ngram_range=(1, 2),min_df=0, stop_words='english')
tfidf_matrix = tf.fit_transform(smd['description'])

tfidf_matrix.shape

cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)

cosine_sim[0]

smd = smd.reset_index()
titles = smd['title']
indices = pd.Series(smd.index, index=smd['title'])

# def content_recommendations(title):
#     idx = indices[title]
#     sim_scores = list(enumerate(cosine_sim[idx]))
#     sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
#     sim_scores = sim_scores[1:31]
#     movie_indices = [i[0] for i in sim_scores]
#     movies = smd.iloc[movie_indices][['title', 'year', 'id' , 'imdb_id']]
    
#     return movies[['title','id','imdb_id']]

def content_recommendations(title):
    idx = indices[title]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:31]
    movie_indices = [i[0] for i in sim_scores]
    movies = smd.iloc[movie_indices][['title', 'year', 'id', 'imdb_id']]
    
    # Convert the DataFrame to a list of dictionaries
    recommendations = movies[['title', 'id', 'imdb_id']].to_dict(orient='records')
    
    return recommendations


"""### Metadata Based Recommender

"""

credits = pd.read_csv('./input/credits.csv')
credits=credits[["cast" ,"crew" , "id" ]]
keywords = pd.read_csv('./input/keywords.csv')

keywords['id'] = keywords['id'].astype('int')
credits['id'] = credits['id'].astype('int')
md['id'] = md['id'].astype('int')

md.shape

md = md.merge(credits, on='id')
md = md.merge(keywords, on='id')

#md['id'].value_counts()

#md[md['id']==0]

#drops index with non english movies titles and fully credits
#md = md.drop([411, 412, 413,414,415,416,417,418,651,652,653,678,679,680,730,56,732,451,43,641,48,712,74])

#drops index with only english movies titles and fully credits
#md = md.drop([556,557,558,538,539,540,69,53,372,40,45,530])

#drops index with only english movies titles and 800 credits
md = md.drop([69,53,372,530,40,554,538,45])

#md['id'].value_counts()

smd = md[md['id'].isin(links_small)]
#smd

smd['cast'] = smd['cast'].apply(literal_eval)
smd['crew'] = smd['crew'].apply(literal_eval)
smd['keywords'] = smd['keywords'].apply(literal_eval)
smd['cast_size'] = smd['cast'].apply(lambda x: len(x))
smd['crew_size'] = smd['crew'].apply(lambda x: len(x))

def get_director(x):
    for i in x:
        if i['job'] == 'Director':
            return i['name']
    return np.nan

smd['director'] = smd['crew'].apply(get_director)

smd['cast'] = smd['cast'].apply(lambda x: [i['name'] for i in x] if isinstance(x, list) else [])
smd['cast'] = smd['cast'].apply(lambda x: x[:3] if len(x) >=3 else x)

smd['keywords'] = smd['keywords'].apply(lambda x: [i['name'] for i in x] if isinstance(x, list) else [])

smd['cast'] = smd['cast'].apply(lambda x: [str.lower(i.replace(" ", "")) for i in x])

smd['director'] = smd['director'].astype('str').apply(lambda x: str.lower(x.replace(" ", "")))
smd['director'] = smd['director'].apply(lambda x: [x,x, x])

s = smd.apply(lambda x: pd.Series(x['keywords']),axis=1).stack().reset_index(level=1, drop=True)
s.name = 'keyword'

s = s.value_counts()
s[:5]

s = s[s > 1]

stemmer = SnowballStemmer('english')
stemmer.stem('dogs')

def filter_keywords(x):
    words = []
    for i in x:
        if i in s:
            words.append(i)
    return words

smd['keywords'] = smd['keywords'].apply(filter_keywords)
smd['keywords'] = smd['keywords'].apply(lambda x: [stemmer.stem(i) for i in x])
smd['keywords'] = smd['keywords'].apply(lambda x: [str.lower(i.replace(" ", "")) for i in x])

smd['soup'] = smd['keywords'] + smd['cast'] + smd['director'] + smd['genres']
smd['soup'] = smd['soup'].apply(lambda x: ' '.join(x))

count = CountVectorizer(analyzer='word',ngram_range=(1, 2),min_df=0, stop_words='english')
count_matrix = count.fit_transform(smd['soup'])

cosine_sim = cosine_similarity(count_matrix, count_matrix)

smd = smd.reset_index()
titles = smd['title']
indices = pd.Series(smd.index, index=smd['title'])

"""## Collaborative Filtering

"""

reader = Reader()
svd = SVD()

ratings = pd.read_csv('./input/ratings_small.csv')
#ratings.head()

get_user_ratings = None
ratings_table = pd.read_csv('./input/ratings_table.csv')

def post_user_ratings(userId,userName,movieId,movieName,rating,review):
    links_small_map = pd.read_csv('./input/links_small.csv')[['movieId', 'imdbId' , 'tmdbId']]
    tagret_movie = links_small_map[links_small_map['tmdbId'] == movieId]
    tagret_id = tagret_movie['movieId'].iloc[0]
    ratings.loc[len(ratings)] = [userId, tagret_id, rating,"Nulled"]
    veiw_ratings = ratings_table.loc[len(ratings_table)] = [userId, userName , tagret_id , movieName , rating, review ]
    def return_ratings():
        return ratings_table
    global get_user_ratings 
    get_user_ratings= return_ratings()
    return ratings_table
    
def post_SVD(userId,userName,movieId,movieName,rating,review):
    links_small_map = pd.read_csv('./input/links_small.csv')[['movieId', 'imdbId' , 'tmdbId']]
    tagret_movie = links_small_map[links_small_map['tmdbId'] == movieId]
    tagret_id = tagret_movie['movieId'].iloc[0]
    ratings.loc[len(ratings)] = [userId, tagret_id, rating,"Nulled"]
    veiw_ratings = ratings_table.loc[len(ratings_table)] = [userId, userName , tagret_id , movieName , rating, review ]
    reader = Reader()
    svd = SVD()
    data = Dataset.load_from_df(ratings[['userId', 'movieId', 'rating']], reader)
    cross_validate(svd, data, measures=['RMSE', 'MAE'], cv=5, verbose=True)
    trainset = data.build_full_trainset()
    svd.fit(trainset)
    def return_ratings():
        #return ratings
        return ratings_table
    global get_user_ratings 
    get_user_ratings= return_ratings()
    return ratings_table

data = Dataset.load_from_df(ratings[['userId', 'movieId', 'rating']], reader)

cross_validate(svd, data, measures=['RMSE', 'MAE'], cv=5, verbose=True)

trainset = data.build_full_trainset()
svd.fit(trainset)

#ratings[ratings['userId'] == 1]

svd.predict(1, 302 , 3 )

"""## Hybrid Recommender

"""

def convert_int(x):
    try:
        return int(x)
    except:
        return np.nan

id_map = pd.read_csv('./input/links_small.csv')[['movieId', 'imdbId' , 'tmdbId']]
id_map['tmdbId'] = id_map['tmdbId'].apply(convert_int)
id_map.columns = ['movieId', 'imdbId' , 'id']
id_map = id_map.merge(smd[['title', 'id']], on='id').set_index('title')

indices_map = id_map.set_index('id')
#print(indices_map)

# def hybrid_recommendations(userId, title):
#     idx = indices[title]
#     tmdbId = id_map.loc[title]['id']
#     imdbId = id_map.loc[title]['imdbId']
#     movie_id = id_map.loc[title]['movieId']
    
#     #cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)
#     sim_scores = list(enumerate(cosine_sim[int(idx)]))
#     sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
#     sim_scores = sim_scores[1:31]
#     movie_indices = [i[0] for i in sim_scores]
#     movies = smd.iloc[movie_indices][['title', 'year', 'id' , 'imdb_id']]
    
#     movies['est'] = movies['id'].apply(lambda x: svd.predict(userId, indices_map.loc[x]['movieId'] , r_ui=None).est)
#     movies = movies.sort_values('est', ascending=False)
    
#     return movies[['title','id','imdb_id']]

def hybrid_recommendations(userId, title):
    idx = indices[title]
    tmdbId = id_map.loc[title]['id']
    imdbId = id_map.loc[title]['imdbId']
    movie_id = id_map.loc[title]['movieId']
    
    #cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)
    sim_scores = list(enumerate(cosine_sim[int(idx)]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:31]
    movie_indices = [i[0] for i in sim_scores]
    movies = smd.iloc[movie_indices][['title', 'year', 'id' , 'imdb_id']]
    
    movies['est'] = movies['id'].apply(lambda x: svd.predict(userId, indices_map.loc[x]['movieId'] , r_ui=None).est)
    movies = movies.sort_values('est', ascending=False)
    
    # Convert the DataFrame to a list of dictionaries
    recommendations = movies[['title', 'id', 'imdb_id']].to_dict(orient='records')
    
    return recommendations

print(hybrid_recommendations(1, "The Mummy"))

# print(content_recommendations("The Frighteners"))

# post_user_ratings(1000 ,"karim" , 282035 , "test1" , 4.5 , "good")

# get_user_ratings

